"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2444],{67712:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>p});var a=t(47185),r=t(74848),l=t(28453);const o={date:"2024-06-29 21:37",slug:"\u54a8\u8be2\u5e08\u6279\u91cf\u81ea\u52a8\u586b\u5145\u591a\u4e2a\u6a21\u677f\u6587\u4ef6v2"},s=void 0,i={authorsImageUrls:[]},p=[];function c(e){const n={admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"\u5236\u4f5c\u4e00\u4e2aexcel\u8868\u683c\uff0c\u4f5c\u4e3a\u6570\u636e\u6536\u96c6\u4e2d\u5fc3\uff0c\u6240\u6709\u7528\u5230\u7684\u6570\u636e\u90fd\u586b\u5145\u5230\u8fd9\u4e2a\u8868\u683c\u91cc\u3002\u7136\u540e\u7528python\u8bfb\u53d6\u8fd9\u4e2a\u8868\u683c\uff0c\u6267\u884c\u6279\u91cf\u66ff\u6362\u6a21\u677f\u6587\u4ef6\u91cc\u7684\u5360\u4f4d\u7b26\u3002"}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.p,{children:"\u6b64\u4e3a\u521d\u7248\u3002\u95ee\u9898\u5f88\u591a\u3002\u5df2\u7ecf\u5e9f\u5f03\u4e0d\u7528\u3002\u56e0\u4e3a\u5728word\u91cc\u67e5\u627e\u6587\u5b57\u3001\u66ff\u6362\uff0c\u662f\u5f88\u4e0d\u9760\u8c31\u7684\u3002\u540e\u6765\u6539\u4e3a\u90ae\u4ef6\u5408\u5e76"}),(0,r.jsx)(n.p,{children:"main.py"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import pandas as pd\nimport os\nimport docx\nfrom openpyxl import load_workbook\nfrom data_readerv2 import read_data_from_excel\n\ndef replace_text_in_runs(runs, replacements):\n    full_text = ''.join(run.text for run in runs)\n    for key, value in replacements.items():\n        if key in full_text:\n            print(f\"Replacing {key} with {value} in paragraph.\")\n            full_text = full_text.replace(key, value)\n    for run in runs:\n        run.text = ''  # \u6e05\u7a7a\u6bcf\u4e2a run \u7684\u6587\u672c\n    if len(runs) > 0:\n        runs[0].text = full_text  # \u5c06\u66ff\u6362\u540e\u7684\u6587\u672c\u653e\u5165\u7b2c\u4e00\u4e2a run \u4e2d\n\ndef replace_paragraph_placeholders(paragraphs, replacements):\n    for paragraph in paragraphs:\n        replace_text_in_runs(paragraph.runs, replacements)\n\ndef replace_table_placeholders(tables, replacements):\n    for table in tables:\n        for row in table.rows:\n            for cell in row.cells:\n                replace_paragraph_placeholders(cell.paragraphs, replacements)\n\ndef replace_header_footer_placeholders(headers_footers, replacements):\n    for header_footer in headers_footers:\n        replace_paragraph_placeholders(header_footer.paragraphs, replacements)\n        replace_table_placeholders(header_footer.tables, replacements)\n\ndef replace_word_placeholders(template_path, output_path, replacements):\n    doc = docx.Document(template_path)\n    \n    # Replace in body paragraphs\n    replace_paragraph_placeholders(doc.paragraphs, replacements)\n    \n    # Replace in tables\n    replace_table_placeholders(doc.tables, replacements)\n    \n    # Replace in headers and footers\n    for section in doc.sections:\n        replace_header_footer_placeholders([section.header], replacements)\n        replace_header_footer_placeholders([section.footer], replacements)\n\n    doc.save(output_path)\n\ndef replace_excel_placeholders(template_path, output_path, replacements):\n    workbook = load_workbook(template_path)\n    for sheet in workbook.worksheets:\n        for row in sheet.iter_rows():\n            for cell in row:\n                if cell.value and isinstance(cell.value, str):\n                    for key, value in replacements.items():\n                        if key in cell.value:\n                            print(f\"Replacing {key} with {value} in cell {cell.coordinate}.\")\n                            cell.value = cell.value.replace(key, value)\n    workbook.save(output_path)\n\n# \u83b7\u53d6\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\ncurrent_directory = os.getcwd()\n\n# \u68c0\u67e5 data.xlsx \u6587\u4ef6\u662f\u5426\u5b58\u5728\ndata_file = os.path.join(current_directory, 'data.xlsx')\nall_replacements = read_data_from_excel(data_file)\n\nfor table_name, replacements in all_replacements.items():\n    # \u83b7\u53d6\u5de5\u5382\u540d\u5b57\u4f5c\u4e3a\u52a8\u6001\u76ee\u5f55\u540d\n    factory_name = replacements.get('{{\u5de5\u5382\u540d\u5b57}}')\n    print(f\"Factory name: {factory_name}\")\n\n    if not factory_name:\n        raise ValueError(f\"\u5de5\u5382\u540d\u5b57\u672a\u627e\u5230\uff0c\u8bf7\u68c0\u67e5 {table_name} \u8868\u4e2d\u7684\u6570\u636e\u3002\")\n\n    # \u5b9a\u4e49\u6a21\u677f\u76ee\u5f55\n    template_directory = os.path.join(current_directory, '\u8d44\u6599')\n\n    # \u626b\u63cf\u6a21\u677f\u76ee\u5f55\uff0c\u6392\u9664\u4e34\u65f6\u6587\u4ef6\n    word_files = []\n    excel_files = []\n\n    for root, _, files in os.walk(template_directory):\n        for file in files:\n            if file.endswith('.docx') or file.endswith('.doc'):\n                if not file.startswith('~$'):\n                    word_files.append(os.path.join(root, file))\n            elif file.endswith('.xlsx') or file.endswith('.xls'):\n                if not file.startswith('~$'):\n                    excel_files.append(os.path.join(root, file))\n\n    # \u521b\u5efa\u8f93\u51fa\u76ee\u5f55\uff0c\u4f7f\u7528\u5de5\u5382\u540d\u5b57\u4f5c\u4e3a\u76ee\u5f55\u540d\n    output_directory = os.path.join(current_directory, factory_name)\n    os.makedirs(output_directory, exist_ok=True)\n\n    print(f\"Output directory: {output_directory}\")\n\n    # \u66ff\u6362\u5e76\u4fdd\u5b58Word\u6587\u4ef6\n    for word_file in word_files:\n        relative_path = os.path.relpath(word_file, template_directory)\n        word_output_path = os.path.join(output_directory, relative_path)\n        os.makedirs(os.path.dirname(word_output_path), exist_ok=True)\n        print(f\"Processing Word file: {word_file}\")\n        replace_word_placeholders(word_file, word_output_path, replacements)\n\n    # \u66ff\u6362\u5e76\u4fdd\u5b58Excel\u6587\u4ef6\n    for excel_file in excel_files:\n        relative_path = os.path.relpath(excel_file, template_directory)\n        excel_output_path = os.path.join(output_directory, relative_path)\n        os.makedirs(os.path.dirname(excel_output_path), exist_ok=True)\n        print(f\"Processing Excel file: {excel_file}\")\n        replace_excel_placeholders(excel_file, excel_output_path, replacements)\n\n    print(f\"\u6240\u6709\u6587\u4ef6\u5df2\u751f\u6210\u5728\u76ee\u5f55: {output_directory}\")\n"})}),(0,r.jsx)(n.p,{children:"\u8bfb\u53d6data.xlsx\uff0c data_reader.py"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import os\nimport pandas as pd\n\ndef read_data_from_excel(data_file):\n    # \u68c0\u67e5 data.xlsx \u6587\u4ef6\u662f\u5426\u5b58\u5728\n    if not os.path.exists(data_file):\n        raise FileNotFoundError(f"{data_file} \u6587\u4ef6\u4e0d\u5b58\u5728\u3002\u8bf7\u68c0\u67e5\u6587\u4ef6\u8def\u5f84\u3002")\n    \n    # \u8bfb\u53d6\u4e2d\u592e\u6570\u636e\u8868\n    xls = pd.ExcelFile(data_file)\n    \n    # \u521b\u5efa\u4e00\u4e2a\u5b57\u5178\u6765\u5b58\u50a8\u6bcf\u4e2a\u8868\u7684\u66ff\u6362\u5b57\u5178\n    all_replacements = {}\n    \n    for sheet_name in xls.sheet_names:\n        df = pd.read_excel(xls, sheet_name=sheet_name)\n        \n        # \u5047\u8bbe\u6bcf\u4e2a\u8868\u683c\u5757\u4e4b\u95f4\u6709\u7a7a\u884c\u9694\u5f00\n        is_table = False\n        table_name = None\n        table_data = []\n        \n        for index, row in df.iterrows():\n            if not row.dropna().empty:\n                if not is_table:\n                    # \u5f00\u59cb\u4e00\u4e2a\u65b0\u7684\u8868\n                    table_name = row[0]\n                    is_table = True\n                else:\n                    # \u6536\u96c6\u8868\u6570\u636e\n                    table_data.append(row)\n            else:\n                # \u7a7a\u884c\u8868\u793a\u5f53\u524d\u8868\u7ed3\u675f\n                if is_table:\n                    is_table = False\n                    if table_data:\n                        # \u5c06\u8868\u6570\u636e\u8f6c\u6362\u6210DataFrame\n                        table_df = pd.DataFrame(table_data)\n                        table_df.columns = table_df.iloc[0]\n                        table_df = table_df[1:]\n                        \n                        # \u52a8\u6001\u521b\u5efa\u66ff\u6362\u5b57\u5178\n                        replacements = {f\'{{{{{column}}}}}\': str(value) for column, value in table_df.iloc[0].items()}\n                        all_replacements[table_name] = replacements\n                    table_data = []\n    \n    # \u6253\u5370\u6240\u6709\u66ff\u6362\u5b57\u5178\u7528\u4e8e\u8c03\u8bd5\n    print("All replacements dictionaries:")\n    for table_name, replacements in all_replacements.items():\n        print(f"{table_name}:")\n        print(replacements)\n    \n    return all_replacements\n'})})]})]})}function d(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var a=t(96540);const r={},l=a.createContext(r);function o(e){const n=a.useContext(l);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(l.Provider,{value:n},e.children)}},47185:e=>{e.exports=JSON.parse('{"permalink":"/docs/blog/\u54a8\u8be2\u5e08\u6279\u91cf\u81ea\u52a8\u586b\u5145\u591a\u4e2a\u6a21\u677f\u6587\u4ef6v2","editUrl":"https://github.com/frankelinli/frankelinli.github.io/edit/main/blog/2024/06-29-\u6279\u91cf\u81ea\u52a8\u586b\u5145\u591a\u4e2a\u6a21\u677f\u6587\u4ef6vs.md","source":"@site/blog/2024/06-29-\u6279\u91cf\u81ea\u52a8\u586b\u5145\u591a\u4e2a\u6a21\u677f\u6587\u4ef6vs.md","title":"\u6279\u91cf\u81ea\u52a8\u586b\u5145\u591a\u4e2a\u6a21\u677f\u6587\u4ef6vs","description":"\u5236\u4f5c\u4e00\u4e2aexcel\u8868\u683c\uff0c\u4f5c\u4e3a\u6570\u636e\u6536\u96c6\u4e2d\u5fc3\uff0c\u6240\u6709\u7528\u5230\u7684\u6570\u636e\u90fd\u586b\u5145\u5230\u8fd9\u4e2a\u8868\u683c\u91cc\u3002\u7136\u540e\u7528python\u8bfb\u53d6\u8fd9\u4e2a\u8868\u683c\uff0c\u6267\u884c\u6279\u91cf\u66ff\u6362\u6a21\u677f\u6587\u4ef6\u91cc\u7684\u5360\u4f4d\u7b26\u3002","date":"2024-06-29T21:37:00.000Z","tags":[],"readingTime":3.795,"hasTruncateMarker":true,"authors":[],"frontMatter":{"date":"2024-06-29 21:37","slug":"\u54a8\u8be2\u5e08\u6279\u91cf\u81ea\u52a8\u586b\u5145\u591a\u4e2a\u6a21\u677f\u6587\u4ef6v2"},"unlisted":false,"lastUpdatedAt":1725939527000,"prevItem":{"title":"\u4ece\u641c\u7d22\u7ed3\u679c\u4e2d\u5168\u9762\u5c4f\u853dCSDN\u65e0\u803b\u4e4b\u5f92","permalink":"/docs/blog/\u4ece\u641c\u7d22\u7ed3\u679c\u4e2d\u5168\u9762\u5c4f\u853dCSDN\u65e0\u803b\u4e4b\u5f92"},"nextItem":{"title":"\u6cb9\u7334\u811a\u672c\u8ba9\u4efb\u610f\u7f51\u9875\u7684\u56fe\u7247\u7acb\u4f53\u5f39\u51fa","permalink":"/docs/blog/\u6cb9\u7334\u811a\u672c\u8ba9\u4efb\u610f\u7f51\u9875\u7684\u56fe\u7247\u7acb\u4f53\u5f39\u51fa"}}')}}]);