{
  "blogPosts": [
    {
      "id": "/2024/04/04/WordPress笔记",
      "metadata": {
        "permalink": "/blog/2024/04/04/WordPress笔记",
        "editUrl": "https://github.com/frankelinli/frankelinli.github.io/edit/main/blog/2024/04-04-WordPress笔记.md",
        "source": "@site/blog/2024/04-04-WordPress笔记.md",
        "title": "WordPress笔记",
        "description": "require DIR . '/wp-blog-header.php';这个什么意思",
        "date": "2024-04-04T20:54:00.000Z",
        "tags": [],
        "readingTime": 0.95,
        "hasTruncateMarker": true,
        "authors": [],
        "frontMatter": {
          "date": "2024-04-04 20:54"
        },
        "unlisted": false,
        "lastUpdatedAt": 1712347586000,
        "nextItem": {
          "title": "2024年4月1日",
          "permalink": "/blog/2024/04/01/2024年4月1日"
        }
      },
      "content": "## require __DIR__ . '/wp-blog-header.php';这个什么意思\r\n\r\n\r\n\r\n\r\n\r\n这行代码的意思是：**使用 `require` 函数载入 `wp-blog-header.php` 文件**。\r\n\r\n**具体解释如下：**\r\n\r\n- `require` 函数：这是一个 PHP 函数，用于载入另一个 PHP 文件。\r\n- `__DIR__`：这是一个 PHP 魔术常量，代表当前文件的目录。\r\n- `/wp-blog-header.php`：这是一个 WordPress 核心文件，负责加载 WordPress 环境和模板。\r\n\r\n**因此，这行代码的作用是：**\r\n\r\n- 将 `wp-blog-header.php` 文件载入到当前脚本中。\r\n- 初始化 WordPress 环境，包括加载数据库配置、主题、插件等。\r\n- 告诉 WordPress 程序要输出主题内容到访客浏览器。\r\n\r\n**总结：**\r\n\r\n这行代码是 WordPress 程序启动过程中的一部分，它负责载入核心文件并启动 WordPress 程序。\r\n\r\n\r\n\r\n<!-- truncate -->"
    },
    {
      "id": "/2024/04/01/2024年4月1日",
      "metadata": {
        "permalink": "/blog/2024/04/01/2024年4月1日",
        "editUrl": "https://github.com/frankelinli/frankelinli.github.io/edit/main/blog/2024/04-01-2024年4月1日.md",
        "source": "@site/blog/2024/04-01-2024年4月1日.md",
        "title": "2024年4月1日",
        "description": "1. 利用这个项目，跟经理搭上线。电话联系。",
        "date": "2024-04-01T18:54:00.000Z",
        "tags": [],
        "readingTime": 1.245,
        "hasTruncateMarker": true,
        "authors": [],
        "frontMatter": {
          "date": "2024-04-01 18:54"
        },
        "unlisted": false,
        "lastUpdatedAt": 1712347586000,
        "prevItem": {
          "title": "WordPress笔记",
          "permalink": "/blog/2024/04/04/WordPress笔记"
        },
        "nextItem": {
          "title": "WordPress主题代码改动记录",
          "permalink": "/blog/2024/03/30/WordPress主题代码改动记录"
        }
      },
      "content": "1. 利用这个项目，跟经理搭上线。电话联系。\r\n\r\n<!-- truncate -->\r\n\r\n2. 好用的扫描王，因为政策原因，不能上传到google drive, onedrive了。阉割的够厉害。\r\n\r\n3. [Node.js: The Documentary | An origin story (youtube.com)](https://www.youtube.com/watch?v=LB8KwiiUGy0)\r\n   Nodejs的发展史，包括创始人访谈。创始人出走，公司分家，又合并。终于到了Node.js的今天。这个网站也是依赖于Node.js来创建的。\r\n\r\n4. 轻易升级了docusaurus 3.2，然后报错，找不到解决方案。尝试退回，一顿胡乱操作。\r\n\r\n   终于成功能使用了。\r\n   以后轻易不要升级了。毕竟这个改变很小很小。\r\n\r\n5. :::danger\r\n\r\n   ### **等到docusaurus 4的时候再升级！其他不要动。否则浪费时间。**\r\n\r\n   太浪费时间！！\r\n\r\n   不要轻易升级！！！\r\n\r\n   官网说的很轻松，实际很多坑！\r\n\r\n   ::::\r\n\r\n6. 最好用还是WordPress，只是搭建WordPress每年要500多块的成本。不划算。所以使用github Page的免费空间，使用静态网站生成。"
    },
    {
      "id": "/2024/03/30/WordPress主题代码改动记录",
      "metadata": {
        "permalink": "/blog/2024/03/30/WordPress主题代码改动记录",
        "editUrl": "https://github.com/frankelinli/frankelinli.github.io/edit/main/blog/2024/03-30-WordPress主题代码改动记录.md",
        "source": "@site/blog/2024/03-30-WordPress主题代码改动记录.md",
        "title": "WordPress主题代码改动记录",
        "description": "这里记录下来对WordPress代码的改动。以备使用。",
        "date": "2024-03-30T12:07:00.000Z",
        "tags": [],
        "readingTime": 0.285,
        "hasTruncateMarker": true,
        "authors": [],
        "frontMatter": {
          "date": "2024-03-30 12:07"
        },
        "unlisted": false,
        "lastUpdatedAt": 1712347586000,
        "prevItem": {
          "title": "2024年4月1日",
          "permalink": "/blog/2024/04/01/2024年4月1日"
        },
        "nextItem": {
          "title": "3月29号",
          "permalink": "/blog/2024/03/29/3月29号"
        }
      },
      "content": "这里记录下来对WordPress代码的改动。以备使用。\r\n\r\n1. 要使博客头部不显示特色图像（feature image），你需要删除以下代码：\r\n\r\n   docy/single.php\r\n\r\n   ```php\r\n   the_post_thumbnail('full', array( 'class' => 'mb-4 featured-image' ) );\r\n   ```\r\n\r\n\r\n2. \r\n\r\n<!-- truncate -->"
    },
    {
      "id": "/2024/03/29/3月29号",
      "metadata": {
        "permalink": "/blog/2024/03/29/3月29号",
        "editUrl": "https://github.com/frankelinli/frankelinli.github.io/edit/main/blog/2024/03-29-3月29号.md",
        "source": "@site/blog/2024/03-29-3月29号.md",
        "title": "3月29号",
        "description": "小学【成绩等级的最新登记要求】",
        "date": "2024-03-29T16:40:00.000Z",
        "tags": [],
        "readingTime": 0.41,
        "hasTruncateMarker": true,
        "authors": [],
        "frontMatter": {
          "date": "2024-03-29 16:40"
        },
        "unlisted": false,
        "lastUpdatedAt": 1712347586000,
        "prevItem": {
          "title": "WordPress主题代码改动记录",
          "permalink": "/blog/2024/03/30/WordPress主题代码改动记录"
        },
        "nextItem": {
          "title": "20240328",
          "permalink": "/blog/2024/03/28/20240328"
        }
      },
      "content": "小学【成绩等级的最新登记要求】\r\nA+（95-100） A（90-94） A-（85-89）\r\nB+（80-84）  B（75-79） \r\nC+（70-74）\r\n\r\n<!-- truncate -->\r\n\r\n\r\n\r\n网站MySQL服务总是自动停止。不省心。不过别放弃。没有简单的事情。\r\n\r\n刷抖音、看电视，简单，但是那不叫“事情”。 如果你发抖音，制作电视，那才叫“事情”。"
    },
    {
      "id": "/2024/03/28/20240328",
      "metadata": {
        "permalink": "/blog/2024/03/28/20240328",
        "editUrl": "https://github.com/frankelinli/frankelinli.github.io/edit/main/blog/2024/03-28-20240328.md",
        "source": "@site/blog/2024/03-28-20240328.md",
        "title": "20240328",
        "description": "我记得每天睡觉前最后一个关注的粉丝。",
        "date": "2024-03-28T21:37:00.000Z",
        "tags": [],
        "readingTime": 0.715,
        "hasTruncateMarker": true,
        "authors": [],
        "frontMatter": {
          "date": "2024-03-28 21:37"
        },
        "unlisted": false,
        "lastUpdatedAt": 1712347586000,
        "prevItem": {
          "title": "3月29号",
          "permalink": "/blog/2024/03/29/3月29号"
        },
        "nextItem": {
          "title": "用python给Markdown文件批量添加头部yaml信息",
          "permalink": "/blog/2024/03/27/用python给Markdown文件批量添加头部yaml信息"
        }
      },
      "content": "我记得每天睡觉前最后一个关注的粉丝。\r\n\r\n目前的总的总结是:\r\n\r\n\r\n是我觉得有价值的，没人看，\r\n\r\n我觉得是没意思的，是大批量转发\r\n\r\n<!-- truncate -->\r\n\r\n领导在“可与不可”之间认可了我，给了我机会。想要送点礼。却不知如何去做。:cry:\r\n\r\n---\r\n\r\n决定不要陷入粉丝增长的焦虑当中了。增长，减少，不要太关注！不然会走火入魔。\r\n\r\n主要还是要创作内容。\r\n\r\n12:30凌晨半夜还增加了一个粉丝。谢谢您！"
    },
    {
      "id": "/2024/03/27/用python给Markdown文件批量添加头部yaml信息",
      "metadata": {
        "permalink": "/blog/2024/03/27/用python给Markdown文件批量添加头部yaml信息",
        "editUrl": "https://github.com/frankelinli/frankelinli.github.io/edit/main/blog/2024/03-27-用python给Markdown文件批量添加头部yaml信息.md",
        "source": "@site/blog/2024/03-27-用python给Markdown文件批量添加头部yaml信息.md",
        "title": "用python给Markdown文件批量添加头部yaml信息",
        "description": "docusaurus下某个文库写了几十篇doc了，但是当时没有添加头部date信息，导致docusaurus每次更新时，页面底部显示的最近更新时间都是npm build的时间，而不是文件创建时的时间。",
        "date": "2024-03-27T16:03:00.000Z",
        "tags": [],
        "readingTime": 2.215,
        "hasTruncateMarker": true,
        "authors": [],
        "frontMatter": {
          "date": "2024-03-27 16:03"
        },
        "unlisted": false,
        "lastUpdatedAt": 1712347586000,
        "prevItem": {
          "title": "20240328",
          "permalink": "/blog/2024/03/28/20240328"
        },
        "nextItem": {
          "title": "写公众号的烦恼",
          "permalink": "/blog/2024/03/27/写公众号的烦恼"
        }
      },
      "content": "docusaurus下某个文库写了几十篇doc了，但是当时没有添加头部date信息，导致docusaurus每次更新时，页面底部显示的最近更新时间都是npm build的时间，而不是文件创建时的时间。\r\n\r\n给头部添加date信息，可以避免这个问题。\r\n\r\n但是已经有几十个doc，我不想一个一个打开来添加。\r\n\r\n<!-- truncate -->\r\n\r\n大神python出场。\r\n\r\n```python\r\nimport os\r\nimport glob\r\nimport fileinput\r\nimport datetime\r\n\r\n# 获取当前日期和时间\r\ncurrent_datetime = datetime.datetime.now()\r\n\r\n# 定义 YAML 内容\r\nyaml_content = \"\"\"---\r\ndate: {date}\r\n---\"\"\".format(date=current_datetime.strftime(\"%Y-%m-%d %H:%M\"))\r\n\r\n# 获取当前目录路径\r\ndirectory = os.getcwd()\r\n\r\n# 遍历当前目录下的所有 .md 文件\r\nfor file_path in glob.glob(os.path.join(directory, '*.md')):\r\n    # 读取文件内容\r\n    with open(file_path, 'r', encoding='utf-8') as file:\r\n        lines = file.readlines()\r\n\r\n    # 在文件头部插入 YAML 内容\r\n    lines.insert(0, yaml_content + '\\n')\r\n\r\n    # 将修改后的内容写回文件\r\n    with open(file_path, 'w', encoding='utf-8') as file:\r\n        file.writelines(lines)\r\n```\r\n\r\n---\r\n\r\n如果要遍历目录下的子文件夹里的Markdown文件，\r\n\r\n要遍历目录下的所有子目录中的 Markdown 文件，可以使用递归方法。以下是修改后的示例代码：\r\n\r\n```python\r\nimport os\r\nimport glob\r\nimport fileinput\r\nimport datetime\r\n\r\n# 获取当前日期和时间\r\ncurrent_datetime = datetime.datetime.now()\r\n\r\n# 定义 YAML 内容\r\nyaml_content = \"\"\"---\r\ndate: {date}\r\n---\"\"\".format(date=current_datetime.strftime(\"%Y-%m-%d %H:%M\"))\r\n\r\n# 定义递归函数\r\ndef process_directory(directory):\r\n    # 遍历目录下的所有文件和子目录\r\n    for entry in os.scandir(directory):\r\n        if entry.is_file() and entry.name.endswith('.md'):\r\n            # 处理 Markdown 文件\r\n            with open(entry.path, 'r', encoding='utf-8') as file:\r\n                lines = file.readlines()\r\n\r\n            # 在文件头部插入 YAML 内容\r\n            lines.insert(0, yaml_content + '\\n')\r\n\r\n            # 将修改后的内容写回文件\r\n            with open(entry.path, 'w', encoding='utf-8') as file:\r\n                file.writelines(lines)\r\n        elif entry.is_dir():\r\n            # 递归处理子目录\r\n            process_directory(entry.path)\r\n\r\n# 获取当前目录路径\r\ndirectory = os.getcwd()\r\n\r\n# 调用递归函数处理目录及其子目录中的 Markdown 文件\r\nprocess_directory(directory)\r\n```"
    },
    {
      "id": "/2024/03/27/写公众号的烦恼",
      "metadata": {
        "permalink": "/blog/2024/03/27/写公众号的烦恼",
        "editUrl": "https://github.com/frankelinli/frankelinli.github.io/edit/main/blog/2024/03-27-写公众号的烦恼.md",
        "source": "@site/blog/2024/03-27-写公众号的烦恼.md",
        "title": "写公众号的烦恼",
        "description": "2018年就开通了公众号。当时写了3片文章，被永久封禁了。没给原因，没给解释，无理由，没有申诉渠道。直接永久封禁。而且占用名下一个账号的位置。也无法柱销。",
        "date": "2024-03-27T15:19:00.000Z",
        "tags": [],
        "readingTime": 0.54,
        "hasTruncateMarker": true,
        "authors": [],
        "frontMatter": {
          "date": "2024-03-27 15:19"
        },
        "unlisted": false,
        "lastUpdatedAt": 1712347586000,
        "prevItem": {
          "title": "用python给Markdown文件批量添加头部yaml信息",
          "permalink": "/blog/2024/03/27/用python给Markdown文件批量添加头部yaml信息"
        },
        "nextItem": {
          "title": "建设网站的成本流水账",
          "permalink": "/blog/2024/03/26/建设网站的成本流水账"
        }
      },
      "content": "2018年就开通了公众号。当时写了3片文章，被永久封禁了。没给原因，没给解释，无理由，没有申诉渠道。直接永久封禁。而且占用名下一个账号的位置。也无法柱销。\r\n\r\n因此，现在写公众号有点怕怕的。担心精心写的文章被无理由永久封禁，而且不给犯错误的机会。\r\n\r\n<!-- truncate -->\r\n\r\n------\r\n\r\n$$\r\n\r\n$$"
    },
    {
      "id": "/2024/03/26/建设网站的成本流水账",
      "metadata": {
        "permalink": "/blog/2024/03/26/建设网站的成本流水账",
        "editUrl": "https://github.com/frankelinli/frankelinli.github.io/edit/main/blog/2024/03-26-建设网站的成本流水账.md",
        "source": "@site/blog/2024/03-26-建设网站的成本流水账.md",
        "title": "建设网站的成本流水账",
        "description": "1. 购买docy主题50￥",
        "date": "2024-03-26T22:53:00.000Z",
        "tags": [],
        "readingTime": 0.125,
        "hasTruncateMarker": true,
        "authors": [],
        "frontMatter": {
          "date": "2024-03-26 22:53"
        },
        "unlisted": false,
        "lastUpdatedAt": 1712347586000,
        "prevItem": {
          "title": "写公众号的烦恼",
          "permalink": "/blog/2024/03/27/写公众号的烦恼"
        },
        "nextItem": {
          "title": "3月26号",
          "permalink": "/blog/2024/03/26/3月26号"
        }
      },
      "content": "1. 购买docy主题50￥\r\n2. 购买eazydoc插件60￥\r\n3. 购买elementor pro分销 100￥\r\n\r\n\r\n\r\n<!-- truncate -->"
    },
    {
      "id": "/2024/03/26/3月26号",
      "metadata": {
        "permalink": "/blog/2024/03/26/3月26号",
        "editUrl": "https://github.com/frankelinli/frankelinli.github.io/edit/main/blog/2024/03-26-3月26号.md",
        "source": "@site/blog/2024/03-26-3月26号.md",
        "title": "3月26号",
        "description": "突破100个粉丝！",
        "date": "2024-03-26T20:13:00.000Z",
        "tags": [],
        "readingTime": 1.315,
        "hasTruncateMarker": true,
        "authors": [],
        "frontMatter": {
          "date": "2024-03-26 20:13"
        },
        "unlisted": false,
        "lastUpdatedAt": 1712347586000,
        "prevItem": {
          "title": "建设网站的成本流水账",
          "permalink": "/blog/2024/03/26/建设网站的成本流水账"
        },
        "nextItem": {
          "title": "3月25号",
          "permalink": "/blog/2024/03/25/3月25号"
        }
      },
      "content": "突破100个粉丝！\r\n\r\n加油！每天有个期待了。虽然不是什么大事。也是个渺渺众生中一个小人物的一点小小的悲喜。\r\n\r\n![image-20240326232204573](https://docu-1319658309.cos.ap-guangzhou.myqcloud.com/image-20240326232204573.png)\r\n\r\n我的文字可以传递个100个人。虽然这100个人并不一定都看。\r\n\r\n<!-- truncate -->\r\n\r\nPython伟大，CMD命令行也挺好用。有些工作，电脑自带的cmd命令行也挺好用。只是没有python那么系统化。所以python不是凭空来的，它的出现，也是在cmd基础上的。\r\n\r\n用VBA同样能实现同样的功能。只是总体而言，实现同一个功能的情况下，Python最简单，最快捷，最方便。\r\n\r\n估计今天不会再涨粉了。谢谢各位看官大佬门。虽然我不会在公众号直接给你们发信息。没必要打扰粉丝们。大家只默默的守护者就好。我写的你喜欢看，那就足够了！在这里写的，估计粉丝们也看不到。即使看到，也是几年以后的事情。"
    },
    {
      "id": "/2024/03/25/3月25号",
      "metadata": {
        "permalink": "/blog/2024/03/25/3月25号",
        "editUrl": "https://github.com/frankelinli/frankelinli.github.io/edit/main/blog/2024/03-25-3月25号.md",
        "source": "@site/blog/2024/03-25-3月25号.md",
        "title": "3月25号",
        "description": "剪头发。树立形象。头发太长了。早该剪了。",
        "date": "2024-03-25T22:58:00.000Z",
        "tags": [],
        "readingTime": 1.98,
        "hasTruncateMarker": true,
        "authors": [],
        "frontMatter": {
          "date": "2024-03-25 22:58"
        },
        "unlisted": false,
        "lastUpdatedAt": 1712347586000,
        "prevItem": {
          "title": "3月26号",
          "permalink": "/blog/2024/03/26/3月26号"
        },
        "nextItem": {
          "title": "bat命令行脚本自动执行git commit和git push",
          "permalink": "/blog/2024/03/24/bat命令行脚本自动执行git commit和git push"
        }
      },
      "content": "剪头发。树立形象。头发太长了。早该剪了。\r\n\r\n吃到一顿桂林米粉。\r\n\r\n晚上想不吃，减肥。坚持到现在。结果剪头发回来没忍住，买了一瓶酒，和一包花生。\r\n\r\n现在还想再去吃米粉。。。坚持住！！！！！！！！！！！！！！！！！！！\r\n\r\n===管住嘴！！！！！！！！！！！！！！！！！！！！！！！===\r\n\r\n<!-- truncate -->\r\n\r\n---\r\n\r\n百度真的是技术有限，跟google差远了。一个网站google已经收录了几百条页面，百度才收录一条。百度在珍惜它的爬虫资源。我的天，你做搜索引擎的，居然怕浪费你的爬虫。我屮艸芔茻。\r\n\r\n---\r\n\r\n![image-20240325230608624](https://docu-1319658309.cos.ap-guangzhou.myqcloud.com/image-20240325230608624.png)\r\n\r\n公众号文章，这几天粉丝数涨了不少。虽然还是很少。。。加油！！！继续产出高质量文章！！！\r\n\r\n**别太在意“高质量”这三个字，有时候你抄袭的也能被评为“高质量”。！！！！！**\r\n\r\n很多东西，别太当真:cry:\r\n\r\n认真你就输了！！世界就是如此残酷！！！:signal_strength:\r\n\r\n---\r\n\r\n不要读论语！！论语害死人！！国学害死人！！论语、国学，就是让你做个傻逼老实人！:warning:如果要读，必须批判地读。！\r\n\r\n---\r\n\r\n什么？你觉得静态网站生成器，每次都要 npm build然后上传，这个过程比较low？人家GitHub都没解决而是积极拥抱的事情，你要瞎操心？！！！\r\n\r\n静态网站就是快！！！有利有弊！！没有十全十美！！！敢号称“十全”的只有乾隆。你没有乾隆的0.0000000000000000000000000000000000001%，就不要妄想十全了！\r\n\r\n有个静态博客，有个免费的GitHub，让你免费做空间，就很好了。！！！别在奢求了！！！"
    },
    {
      "id": "/2024/03/24/bat命令行脚本自动执行git commit和git push",
      "metadata": {
        "permalink": "/blog/2024/03/24/bat命令行脚本自动执行git commit和git push",
        "editUrl": "https://github.com/frankelinli/frankelinli.github.io/edit/main/blog/2024/03-24-bat命令行脚本自动执行git commit和git push.md",
        "source": "@site/blog/2024/03-24-bat命令行脚本自动执行git commit和git push.md",
        "title": "bat命令行脚本自动执行git commit和git push",
        "description": "用bat命令行脚本，自动执行git commit, git push。点击这个脚本，就可以自动运行了。chcp 65001 > nul是为了让终端显示中文，否则会乱码。",
        "date": "2024-03-24T22:14:00.000Z",
        "tags": [],
        "readingTime": 1.05,
        "hasTruncateMarker": true,
        "authors": [],
        "frontMatter": {
          "date": "2024-03-24 22:14"
        },
        "unlisted": false,
        "lastUpdatedAt": 1712347586000,
        "prevItem": {
          "title": "3月25号",
          "permalink": "/blog/2024/03/25/3月25号"
        },
        "nextItem": {
          "title": "用python自动化生成Markdown文件的yml头部信息",
          "permalink": "/blog/2024/03/24/用python自动化生成Markdown文件的yml头部信息"
        }
      },
      "content": "用bat命令行脚本，自动执行git commit, git push。点击这个脚本，就可以自动运行了。`chcp 65001 > nul`是为了让终端显示中文，否则会乱码。\r\n\r\n好用的要哭！从此告别以下步骤：\r\n\r\n1. git add .\r\n2. git commit -m 'test xcfdf'\r\n3. git push\r\n\r\n<!-- truncate -->\r\n\r\n![image-20240324222044694](https://docu-1319658309.cos.ap-guangzhou.myqcloud.com/image-20240324222044694.png)\r\n\r\n``` bat title='/auto git push.bat'\r\n@echo off\r\nchcp 65001 > nul\r\necho 正在执行 Git 命令...\r\n\r\necho 添加更改到git...\r\ngit add .\r\ntimeout /t 2\r\n\r\necho 正在提交更改...\r\ngit commit -m \"自动提交\"\r\ntimeout /t 2\r\n\r\necho 正在推送更改到远程仓库...\r\ngit push\r\ntimeout /t 2\r\n\r\necho Git 命令执行成功。\r\npause\r\n```\r\n\r\n\r\n\r\n批处理命令自动git push到GitHub，GitHub action自动执行deploy生成网页，哎呀，妈耶，过程太丝滑，全自动！\r\n\r\n写好博客后，点击以下这个批处理脚本，就万事大吉了！！！"
    },
    {
      "id": "/2024/03/24/用python自动化生成Markdown文件的yml头部信息",
      "metadata": {
        "permalink": "/blog/2024/03/24/用python自动化生成Markdown文件的yml头部信息",
        "editUrl": "https://github.com/frankelinli/frankelinli.github.io/edit/main/blog/2024/03-24-用python自动化生成Markdown文件的yml头部信息.md",
        "source": "@site/blog/2024/03-24-用python自动化生成Markdown文件的yml头部信息.md",
        "title": "用python自动化生成Markdown文件的yml头部信息",
        "description": "用python自动化生成Markdown文件，并自动填入yml头部信息。你可以在代码中修改，加入自己想要自动化填入的信息，比如可以自动化填入作者、标题等等，全部都可以！",
        "date": "2024-03-24T21:22:00.000Z",
        "tags": [],
        "readingTime": 1.225,
        "hasTruncateMarker": true,
        "authors": [],
        "frontMatter": {
          "date": "2024-03-24 21:22"
        },
        "unlisted": false,
        "lastUpdatedAt": 1712347586000,
        "prevItem": {
          "title": "bat命令行脚本自动执行git commit和git push",
          "permalink": "/blog/2024/03/24/bat命令行脚本自动执行git commit和git push"
        },
        "nextItem": {
          "title": "docusaurus目前不适合做博客",
          "permalink": "/blog/2024/03/21/docusaurus目前不适合做博客"
        }
      },
      "content": "用python自动化生成Markdown文件，并自动填入yml头部信息。你可以在代码中修改，加入自己想要自动化填入的信息，比如可以自动化填入作者、标题等等，全部都可以！\r\n\r\n我又让它自动填入`<!-- truncate -->\\`命令，这样在docusaurus博客列表中，就会显示摘要了，不用每次自己手动输入这个难写的命令了。\r\n\r\n伟大的python！\r\n\r\n<!-- truncate -->\r\n\r\n```python title=\"/auto creat markdown file and auto fill in yml.py\"\r\n\r\n# 获取当前日期和时间\r\ncurrent_datetime = datetime.datetime.now()\r\n\r\n# 构建 Markdown 文件名（去掉扩展名）\r\nmd_filename = f\"{current_datetime.year}年{current_datetime.month}月{current_datetime.day}日\"\r\n\r\n# 构建 YAML 内容\r\nyaml_content = \"\"\"---\r\ntitle: {title}\r\nauthor: Your Name\r\ndate: {date}\r\n---\"\"\".format(title=md_filename, date=current_datetime)\r\n\r\n# 写入 Markdown 文件内容\r\nmd_content = \"\\n\\n\\n<!-- truncate -->\\n\"\r\n\r\nwith open(f\"{md_filename}.md\", \"w\", encoding=\"utf-8\") as file:\r\n    file.write(yaml_content)\r\n    file.write(md_content)\r\n\r\nprint(f\"Markdown 文件 {md_filename}.md 创建成功，YAML 头信息和内容已写入文件。\")\t\r\n```\r\n\r\n:::tip\r\n\r\n注意，如果自动填入的内容是中文，encoding=\"utf-8\"必须要写；否则填入的是乱码\r\n\r\n:::"
    },
    {
      "id": "/2024/03/21/docusaurus目前不适合做博客",
      "metadata": {
        "permalink": "/blog/2024/03/21/docusaurus目前不适合做博客",
        "editUrl": "https://github.com/frankelinli/frankelinli.github.io/edit/main/blog/2024/03-21-docusaurus目前不适合做博客.md",
        "source": "@site/blog/2024/03-21-docusaurus目前不适合做博客.md",
        "title": "docusaurus目前不适合做博客",
        "description": "docusaurus目前不适合做博客。这是总结。docusaurus是为文档而生，不适合做博客。",
        "date": "2024-03-21T00:00:00.000Z",
        "tags": [],
        "readingTime": 0.585,
        "hasTruncateMarker": false,
        "authors": [],
        "frontMatter": {
          "date": "2024-03-21T00:00:00.000Z"
        },
        "unlisted": false,
        "lastUpdatedAt": 1712347586000,
        "prevItem": {
          "title": "用python自动化生成Markdown文件的yml头部信息",
          "permalink": "/blog/2024/03/24/用python自动化生成Markdown文件的yml头部信息"
        },
        "nextItem": {
          "title": "用python把多个pdf合并为一个PDF并自动添加书签",
          "permalink": "/blog/2024/03/20/用python把多个pdf合并为一个PDF并自动添加书签"
        }
      },
      "content": "docusaurus目前不适合做博客。这是总结。docusaurus是为文档而生，不适合做博客。\r\n\r\n用功能更丰富全面的hexo是最佳选择。\r\n\r\n---\r\n\r\n折腾了以下hexo，是挺好用。但是会让我陷入折腾主题和页面外观的窘境。所以不用它了。因为折腾起来没完没了。\r\n\r\n不删除仓库了。反正免费服务空间。放这里瞻仰吧。\r\n\r\n[Hexo (frankelinli.github.io)](https://frankelinli.github.io/hexoBlog/)\r\n\r\n\r\n\r\n### **所以还是用回**docusaurus。"
    },
    {
      "id": "/2024/03/20/用python把多个pdf合并为一个PDF并自动添加书签",
      "metadata": {
        "permalink": "/blog/2024/03/20/用python把多个pdf合并为一个PDF并自动添加书签",
        "editUrl": "https://github.com/frankelinli/frankelinli.github.io/edit/main/blog/2024/03-20-用python把多个pdf合并为一个PDF并自动添加书签.md",
        "source": "@site/blog/2024/03-20-用python把多个pdf合并为一个PDF并自动添加书签.md",
        "title": "用python把多个pdf合并为一个PDF并自动添加书签",
        "description": "这是以前的一个python小程序。假如文件夹下有5个PDF文件，他们的名字分别是：",
        "date": "2024-03-20T00:00:00.000Z",
        "tags": [],
        "readingTime": 2.18,
        "hasTruncateMarker": true,
        "authors": [],
        "frontMatter": {
          "date": "2024-03-20T00:00:00.000Z"
        },
        "unlisted": false,
        "lastUpdatedAt": 1712347586000,
        "prevItem": {
          "title": "docusaurus目前不适合做博客",
          "permalink": "/blog/2024/03/21/docusaurus目前不适合做博客"
        },
        "nextItem": {
          "title": "docusaurus和腾讯云服务器的朴素沟通",
          "permalink": "/blog/2024/03/19/docusaurus和腾讯云服务器的朴素沟通"
        }
      },
      "content": "这是以前的一个python小程序。假如文件夹下有5个PDF文件，他们的名字分别是：\r\n\r\n1.  hello\r\n2.  world\r\n3.  nihao\r\n4.  shijie\r\n5.  thankyou\r\n\r\n----\r\n\r\n把他们合并到成一个jieshao.pdf文件，并且用上面5个文件的名字来作为jieshao.pdf的书签。\r\n\r\n*<!-- truncate -->*\r\n\r\n:::info\r\n\r\n这个函数会遍历要求目录下的所有文件，将以  .pdf 结尾的所有pdf合并成一个新的pdf，并保存在 file_dir 目录下\r\n\r\n:::\r\n\r\n```python\r\nimport os\r\nimport os.path\r\nfrom PyPDF2 import PdfFileReader, PdfFileWriter\r\nimport time\r\n\r\n##########################找到 filepath 下的所有pdf，将地址返回########################\r\ndef getFileName(filepath):\r\n    list1=[]\r\n    for root, dirs, files in os.walk(filepath, topdown=False):\r\n        for name in files:\r\n            if name.endswith(\".pdf\"):\r\n                list1.append(os.path.join(root, name))\r\n    return list1\r\n\r\n##########################合并同一个文件夹下所有PDF文件########################\r\ndef MergePDF(filepath, outfile):\r\n    output = PdfFileWriter()\r\n    outputPages = 0\r\n    pdf_fileName = getFileName(filepath)\r\n    for each_file in pdf_fileName:\r\n        print(\"adding %s\" % each_file)\r\n        # 读取源pdf文件\r\n        input = PdfFileReader(open(each_file, \"rb\"))\r\n\r\n        # 如果pdf文件已经加密，必须首先解密才能使用pyPdf\r\n        if input.isEncrypted == True:\r\n            input.decrypt(\"map\")\r\n\r\n        # 获得源pdf文件中页面总数\r\n        pageCount = input.getNumPages()\r\n        outputPages += pageCount\r\n        print(\"%s has %d pages\" % (each_file, pageCount))\r\n\r\n        # 分别将page添加到输出output中\r\n        for iPage in range(pageCount):\r\n            output.addPage(input.getPage(iPage))\r\n\r\n        # 添加书签,以pdf名字命名书签,并且有书签名中带页码范围\r\n        x=outputPages-pageCount  #当前PDF到了第几页\r\n        output.addBookmark(\r\n            title=each_file.split(\"\\\\\")[-1]+str(x+1)+'-'+str(x+pageCount),pagenum=x)\r\n\r\n    print(\"All Pages Number: \" + str(outputPages))\r\n    # 最后写pdf文件\r\n    outputStream = open(os.path.join(filepath, outfile), \"wb\")\r\n    output.write(outputStream)\r\n    outputStream.close()\r\n    print(\"finished\")\r\n\r\n\r\nif __name__ == '__main__':\r\n    time1 = time.time()\r\n    # 这里保存pdf文件的目录    \r\n    file_dir =r'C:\\Users\\frankelin\\Documents\\湖南醴陵旅游' \r\n    # 这里保存生成文件的名字\r\n    out = u\"jieshao.pdf\" \r\n    #这个函数会遍历要求目录下的所有文件，将以  .pdf 结尾的所有pdf合并成一个新的pdf，并保存在 file_dir 目录下\r\n    MergePDF(file_dir, out)\r\n    time2 = time.time()\r\n    print(u'总共耗时： %.4f s' % (time2 - time1))\r\n\r\n```"
    },
    {
      "id": "/2024/03/19/docusaurus和腾讯云服务器的朴素沟通",
      "metadata": {
        "permalink": "/blog/2024/03/19/docusaurus和腾讯云服务器的朴素沟通",
        "editUrl": "https://github.com/frankelinli/frankelinli.github.io/edit/main/blog/2024/03-19-docusaurus和腾讯云服务器的朴素沟通.md",
        "source": "@site/blog/2024/03-19-docusaurus和腾讯云服务器的朴素沟通.md",
        "title": "docusaurus和腾讯云服务器的朴素沟通",
        "description": "本地电脑，访问远程主机的localhost:3000",
        "date": "2024-03-19T00:00:00.000Z",
        "tags": [],
        "readingTime": 6.74,
        "hasTruncateMarker": true,
        "authors": [],
        "frontMatter": {
          "date": "2024-03-19T00:00:00.000Z"
        },
        "unlisted": false,
        "lastUpdatedAt": 1712347586000,
        "prevItem": {
          "title": "用python把多个pdf合并为一个PDF并自动添加书签",
          "permalink": "/blog/2024/03/20/用python把多个pdf合并为一个PDF并自动添加书签"
        },
        "nextItem": {
          "title": "git命令操作合集简明版",
          "permalink": "/blog/2024/03/18/git命令操作合集简明版"
        }
      },
      "content": "### 本地电脑，访问远程主机的localhost:3000\r\n\r\nssh -L 3000:localhost:3000 root@121.220.83.133\r\n\r\n这个命令会将本地电脑的 `3000` 端口转发到远程主机上的 `localhost:3000` 端口。\r\n\r\nSSH 端口转发是一次性的，只要你关闭了终端窗口，端口转发就会自动停止。\r\n\r\n端口转发只会影响你当前的 SSH 连接以及转发的端口，不会影响你的其他网络连接和端口使用\r\n*<!-- truncate -->*\r\n\r\n\r\n---\r\n\r\n\r\n### 从远程服务器下载（备份）文件到本地\r\n\r\n```bash\r\nscp -r root@121.220.83.133:/www/wwwroot/konglong/* C:\\Users\\frankelin\\Desktop\\shiyishi\\\r\n```\r\n\r\n在这个命令中，`-r` 选项表示要递归复制整个目录树，`root@121.220.83.133:/www/wwwroot/ceshi/*` 指定了要复制的远程目录和文件名通配符，`C:\\Users\\frankelin\\Desktop\\shiyishi\\` 指定了要将文件复制到本地的目录。请注意，路径末尾的斜杠很重要，它表示将文件复制到目录中，而不是将整个远程目录复制到本地目录中。\r\n\r\n在运行命令时，您需要输入远程主机的密码。另外，请确保本地主机和远程主机之间的网络连接正常，并且您具有足够的权限访问远程主机上的文件和目录。\r\n\r\n---\r\n\r\n### Linux主机，设置一键deploy部署静态网站\r\n\r\n制作一个Linux的批处理，首先运行npm run build;然后执行把build里构建好的文件，复制到网站根目录下。\r\n\r\n您可以创建一个Shell脚本，将这两条命令放在一起执行。具体步骤如下：\r\n\r\n**打开终端，使用文本编辑器创建一个新文件，比如说`deploy.sh`：**\r\n\r\n```bash\r\nnano deploy.sh\r\n```\r\n\r\n**在文件中输入以下内容：**\r\n\r\n```bash\r\n#!/bin/bash\r\n\r\n# 进入项目目录\r\necho \"正在进入项目目录：/www/wwwroot/konglong\"\r\ncd /www/wwwroot/konglong\r\n\r\n# 执行npm run build\r\necho \"正在执行npm run build命令\"\r\nnpm run build\r\n\r\n# 复制文件\r\necho \"正在复制文件到目标目录：/www/wwwroot/mart\"\r\ncp -r /www/wwwroot/konglong/build/* /www/wwwroot/mart/\r\n\r\n# 完成\r\necho \"部署已完成\"\r\n```\r\n\r\n这个脚本首先进入项目目录`/www/wwwroot/konglong`，然后执行`npm run build`命令生成打包文件，最后使用`cp`命令将打包文件复制到目标目录`/www/wwwroot/mart`。\r\n\r\n**保存并退出文件。然后使用以下命令为脚本添加可执行权限：**\r\n\r\n```bash\r\nchmod +x deploy.sh\r\n```\r\n\r\n**现在您可以运行这个脚本了。在终端中输入以下命令：**\r\n\r\n```bash\r\n./deploy.sh\r\n```\r\n\r\n这个命令会执行`deploy.sh`脚本，依次执行`npm run build`和`cp`命令。\r\n\r\n请注意，这个脚本中的路径应该根据您的实际情况进行修改。另外，如果您不希望每次运行脚本时都需要输入密码，可以将脚本放在root用户的家目录下，并使用root用户运行脚本。\r\n\r\n**如果您将这个脚本保存在一个可执行的文件中，并将该文件添加到系统的PATH环境变量中，那么您可以在任意目录下运行该命令。**\r\n\r\n以下是将脚本添加到PATH环境变量的步骤：\r\n\r\n1. 将脚本保存为一个可执行文件，比如`deploy.sh`。\r\n2. 将文件复制到/usr/local/bin目录下：\r\n\r\n```bash\r\nsudo cp deploy.sh /usr/local/bin/deploy\r\n```\r\n\r\n这个命令将文件复制到/usr/local/bin目录下，并将文件名改为`deploy`。这个目录通常是系统的PATH环境变量包含的目录之一。\r\n\r\n3. 添加执行权限：\r\n\r\n```bash\r\nsudo chmod +x /usr/local/bin/deploy\r\n```\r\n\r\n这个命令将给`/usr/local/bin/deploy`文件添加可执行权限。\r\n\r\n4. 现在您可以在任意目录下运行该命令了：\r\n\r\n```bash\r\ndeploy\r\n```\r\n\r\n这个命令会执行`/usr/local/bin/deploy`文件，依次执行`npm run build`和`cp`命令。\r\n\r\n请注意，如果您在执行命令时仍然遇到权限问题，可以尝试使用sudo命令以root权限运行该命令。\r\n\r\n---\r\n\r\n```\r\ncat ~/.ssh/id_rsa.pub | ssh root@121.220.83.133 \"mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys\"\r\n```\r\n\r\n---\r\n\r\n### SSH秘钥，这样就不用每次连接服务器都输入密码了\r\n\r\n在默认情况下，每次使用 `scp` 命令都需要输入远程主机的密码。为了避免每次手动输入密码，您可以使用 SSH 公钥认证的方式。\r\n\r\nSSH 公钥认证的基本原理是，在本地主机上生成一对公钥和私钥，将公钥复制到远程主机上，然后将私钥用于本地主机与远程主机之间的认证，这样就可以实现自动登录，不再需要手动输入密码。\r\n\r\n以下是使用 SSH 公钥认证的步骤：\r\n\r\n1. 在本地主机上生成 SSH 密钥对。\r\n\r\n```\r\nssh-keygen -t rsa\r\n```\r\n\r\n按照提示输入文件名和密码。如果您不想设置密码，可以直接按回车键。\r\n\r\n2. 将公钥复制到远程主机上。\r\n\r\n```\r\nssh-copy-id username@remote_host\r\n```\r\n\r\n[如果windows终端执行不了这个代码，则需要安装git,用Git的bash终端来执行这个命令]\r\n\r\n其中 `username` 是远程主机上的用户名，`remote_host` 是远程主机的 IP 地址或主机名。运行命令后，您需要输入远程主机的密码。\r\n\r\n3. 测试 SSH 公钥认证是否生效。\r\n\r\n```\r\nssh root@121.220.83.133\r\n```\r\n\r\n如果 SSH 公钥认证设置成功，您将可以直接登录到远程主机，不再需要输入密码。此时，您可以使用 `scp` 命令将文件上传到远程主机，不再需要手动输入密码。\r\n\r\n---\r\n\r\n```bash\r\nrsync -avzhe ssh --delete C:\\Users\\frankelin\\wiki root@121.220.83.133:/www/wwwroot/konglong\r\n```"
    },
    {
      "id": "/2024/03/18/git命令操作合集简明版",
      "metadata": {
        "permalink": "/blog/2024/03/18/git命令操作合集简明版",
        "editUrl": "https://github.com/frankelinli/frankelinli.github.io/edit/main/blog/2024/03-18-git命令操作合集简明版.md",
        "source": "@site/blog/2024/03-18-git命令操作合集简明版.md",
        "title": "git命令操作合集简明版",
        "description": "平时自己敲敲代码，使用Git命令也渐渐多了起来。使用起来的确很方便，今天来分享下Git基本概念和本地代码提交到github上的过程，很简单的，多操作几次就会了。",
        "date": "2024-03-18T00:00:00.000Z",
        "tags": [],
        "readingTime": 10.585,
        "hasTruncateMarker": true,
        "authors": [],
        "frontMatter": {
          "date": "2024-03-18T00:00:00.000Z"
        },
        "unlisted": false,
        "lastUpdatedAt": 1712347586000,
        "prevItem": {
          "title": "docusaurus和腾讯云服务器的朴素沟通",
          "permalink": "/blog/2024/03/19/docusaurus和腾讯云服务器的朴素沟通"
        },
        "nextItem": {
          "title": "20240322",
          "permalink": "/blog/2024/03/22/20240322"
        }
      },
      "content": "平时自己敲敲代码，使用Git命令也渐渐多了起来。使用起来的确很方便，今天来分享下Git基本概念和本地代码提交到github上的过程，很简单的，多操作几次就会了。\r\n\r\n## <!-- truncate -->\r\n\r\n## Git定义\r\n\r\nGit 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。\r\n\r\nGit 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。\r\n\r\n## Git 与 SVN 区别\r\n\r\n**1、Git 是分布式的，SVN 不是**：这是 Git 和其它非分布式的版本控制系统，例如 SVN，CVS 等，最核心的区别。\r\n\r\n**2、Git 把内容按元数据方式存储，而 SVN 是按文件：**所有的资源控制系统都是把文件的元信息隐藏在一个类似 .svn、.cvs 等的文件夹里。\r\n\r\n**3、Git 分支和 SVN 的分支不同：**分支在 SVN 中一点都不特别，其实它就是版本库中的另外一个目录。\r\n\r\n**4、Git 没有一个全局的版本号，而 SVN 有：**目前为止这是跟 SVN 相比 Git 缺少的最大的一个特征。\r\n\r\n**5、Git 的内容完整性要优于 SVN：**Git 的内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。\r\n\r\n## Git安装\r\n\r\nGit的安装就各取所需了，看各自是在什么平台上使用。如果是在windows系统操作的话，在该地址下载exe文件：https://gitforwindows.org/，安装即可。\r\n\r\n安装成功后，就可以使用命令行的git工具（已经自带了ssh客户端）了，另外还有一个图形界面的 Git 项目管理工具。\r\n\r\n在开始菜单里找到\"Git\"->\"Git Bash\"，会弹出Git命令窗口，你可以在该窗口进行Git操作。\r\n\r\n## Git基本命令\r\n\r\n### 新建代码库\r\n\r\n\r\n\r\n```bash\r\n# 在当前目录新建一个 Git 代码库\r\ngit init\r\n\r\n# 新建一个目录，将其初始化为 Git 代码库\r\ngit init [project-name]\r\n\r\n# 下载一个项目和它的整个代码历史\r\ngit clone [url]\r\n```\r\n\r\n### 配置文件\r\n\r\nGit的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\r\n\r\n\r\n\r\n```bash\r\n# 显示当前的 Git 配置\r\ngit config --list\r\n\r\n# 编辑 Git 配置文件\r\ngit config -e [--global]\r\n\r\n# 设置提交代码时的用户信息\r\ngit config [--global] user.name \"[name]\"\r\ngit config [--global] user.email \"[email address]\"\r\n```\r\n\r\n### 增加/删除文件\r\n\r\n\r\n\r\n```bash\r\n# 添加指定文件到暂存区\r\ngit add [file1] [file2] ...\r\n\r\n# 添加指定目录到暂存区，包括子目录\r\ngit add [dir]\r\n\r\n# 添加当前目录的所有文件到暂存区\r\ngit add .\r\n\r\n# 删除工作区文件，并且将这次删除放入暂存区\r\ngit rm [file1] [file2] ...\r\n\r\n# 停止追踪指定文件，但该文件会保留在工作区\r\ngit rm --cached [file]\r\n\r\n# 改名文件，并且将这个改名放入暂存区\r\ngit mv [file-original] [file-renamed]\r\n\r\n\r\n代码提交\r\n# 提交暂存区到仓库区\r\ngit commit -m [message]\r\n\r\n# 提交暂存区的指定文件到仓库区\r\ngit commit [file1] [file2] ... -m [message]\r\n\r\n# 提交工作区自上次 commit 之后的变化，直接到仓库区\r\ngit commit -a\r\n\r\n# 提交时显示所有 diff 信息\r\ngit commit -v\r\n\r\n# 使用一次新的 commit，替代上一次提交\r\n# 如果代码没有任何新变化，则用来改写上一次 commit 的提交信息\r\ngit commit --amend -m [message]\r\n\r\n# 重做上一次 commit，并包括指定文件的新变化\r\ngit commit --amend   ...\r\n```\r\n\r\n### 分支操作\r\n\r\n\r\n\r\n```bash\r\n# 列出所有本地分支\r\ngit branch\r\n\r\n# 列出所有远程分支\r\ngit branch -r\r\n\r\n# 列出所有本地分支和远程分支\r\ngit branch -a\r\n\r\n# 新建一个分支，但依然停留在当前分支\r\ngit branch [branch-name]\r\n\r\n# 新建一个分支，并切换到该分支\r\ngit checkout -b [branch]\r\n\r\n# 新建一个分支，指向指定 commit\r\ngit branch [branch] [commit]\r\n\r\n# 新建一个分支，与指定的远程分支建立追踪关系\r\ngit branch --track [branch] [remote-branch]\r\n\r\n# 切换到指定分支，并更新工作区\r\ngit checkout [branch-name]\r\n\r\n# 建立追踪关系，在现有分支与指定的远程分支之间\r\ngit branch --set-upstream [branch] [remote-branch]\r\n\r\n# 合并指定分支到当前分支\r\ngit merge [branch]\r\n\r\n# 选择一个 commit，合并进当前分支\r\ngit cherry-pick [commit]\r\n\r\n# 删除分支\r\ngit branch -d [branch-name]\r\n\r\n# 删除远程分支\r\ngit push origin --delete \r\ngit branch -dr\r\n```\r\n\r\n### 查看信息\r\n\r\n\r\n\r\n```bash\r\n# 显示有变更的文件\r\ngit status\r\n\r\n# 显示当前分支的版本历史\r\ngit log\r\n\r\ngit log --pretty=oneline  # 使用不同于默认格式的方式展示提交历史\r\ngit log --online  # 简洁展示历史\r\ngit log --oneline --all  # 分支所有呈现\r\ngit log --stat  # 显示 commit 历史，以及每次 commit 发生变更的文件交\r\ngit log -p [file]  # 显示指定文件相关的每一次 diff\r\ngit log -p -2      # 展示最近的两次提交\r\ngit log -n4 --online  # 看最近的历史消息\r\ngit branch -v  # 看本地有多少分支\r\ngit checkout -b dashu 223343232  # 分支 , 修改分支\r\n\r\n# 显示暂存区和工作区的差异\r\ngit diff\r\n\r\n# 显示暂存区和上一个 commit 的差异\r\ngit diff --cached []\r\n\r\n# 显示工作区与当前分支最新 commit 之间的差异\r\ngit diff HEAD\r\n\r\n# 显示两次提交之间的差异/两个分支的比较\r\ngit diff [first-branch]...[second-branch]\r\ngit diff test master # 本地和本地\r\ngit diff test origin/test # 本地和远程\r\n\r\n# 显示某次提交的元数据和内容变化\r\ngit show [commit]\r\n\r\n# 显示某次提交发生变化的文件\r\ngit show --name-only [commit]\r\n\r\n# 显示某次提交时，某个文件的内容\r\ngit show [commit]:[filename]\r\n\r\n# 显示当前分支的最近几次提交\r\ngit reflog\r\n```\r\n\r\n### 远程同步\r\n\r\n\r\n\r\n```bash\r\n# 下载远程仓库的所有变动\r\ngit fetch [remote]\r\n\r\n# 显示所有远程仓库\r\ngit remote -v\r\n\r\n# 显示某个远程仓库的信息\r\ngit remote show [remote]\r\n\r\n# 增加一个新的远程仓库，并命名\r\ngit remote add [shortname] [url]\r\n\r\n# 取回远程仓库的变化，并与本地分支合并\r\ngit pull [remote] [branch]\r\n\r\n# 上传本地指定分支到远程仓库\r\ngit push [remote] [branch]\r\n\r\n# 强行推送当前分支到远程仓库，即使有冲突\r\ngit push [remote] --force\r\n\r\n# 推送所有分支到远程仓库\r\ngit push [remote] --all\r\n```\r\n\r\n## 代码提交github\r\n\r\n了解了如上命令，是不是想实践一番了？那就跟我来再实践一波，你会发现，Git的基本使用并不是那么难。\r\n\r\n首先需要有github账号，这个自行注册。\r\n\r\n### 新建仓库\r\n\r\n新建仓库有两种方式，可以直接在github中创建，也可以使用命令操作。\r\n\r\n#### github创建\r\n\r\n直接在github中仓库，操作如下所示：\r\n\r\n[![img](https://docu-1319658309.cos.ap-guangzhou.myqcloud.com/1242227-20200522171816898-178539344.png)](https://img2020.cnblogs.com/blog/1242227/202005/1242227-20200522171816898-178539344.png)\r\n\r\n输入仓库信息，如下：\r\n\r\n[![img](https://docu-1319658309.cos.ap-guangzhou.myqcloud.com/1242227-20200522171856264-528726732.png)](https://img2020.cnblogs.com/blog/1242227/202005/1242227-20200522171856264-528726732.png)\r\n\r\n#### 命令创建\r\n\r\n通过git终端，进入到已有内容的文件夹目录下，输入命令**git init**即可，初始化仓库。\r\n\r\n### 配置身份\r\n\r\n配置了身份，这样提交代码的时候系统就知道是谁提交的了，命令如下：\r\n\r\n```bash\r\ngit config --global user.name ``\"yourName\"` `//注意，--和global之间没有空格` `git config --global user.email ``\"yourName@mail.com\"\r\n```\r\n\r\n检查是否配置成功，输入：\r\n\r\n```bash\r\ngit config --global user.name` `git config --global user.email\r\n```\r\n\r\n 如图所示：\r\n\r\n[![img](https://docu-1319658309.cos.ap-guangzhou.myqcloud.com/1242227-20200522173101981-604610275.png)](https://img2020.cnblogs.com/blog/1242227/202005/1242227-20200522173101981-604610275.png)\r\n\r\n### 秘钥配置\r\n\r\n#### 生成秘钥\r\n\r\n如何正常与github建立连接？就需要密码配置，生成秘钥命令如下：\r\n\r\n```\r\nssh-keygen -t rsa -C ``\"github注册邮箱\"\r\n```\r\n\r\n 操作如下所示：\r\n\r\n[![img](https://docu-1319658309.cos.ap-guangzhou.myqcloud.com/1242227-20200522173556108-1670904934.png)](https://img2020.cnblogs.com/blog/1242227/202005/1242227-20200522173556108-1670904934.png)\r\n\r\n#### 配置秘钥\r\n\r\n生成的秘钥文件存在目录为：用户目录下的.ssh文件夹\r\n\r\ngithub配置的路径是：设置>ssh keys\r\n\r\n[![img](https://docu-1319658309.cos.ap-guangzhou.myqcloud.com/1242227-20200522173817747-2067284804.png)](https://img2020.cnblogs.com/blog/1242227/202005/1242227-20200522173817747-2067284804.png)\r\n\r\n将id_rsa.pub文件内容复制到key中即可，配置成功后，如下所示：\r\n\r\n[![img](https://docu-1319658309.cos.ap-guangzhou.myqcloud.com/1242227-20200522174716773-440755689.png)](https://img2020.cnblogs.com/blog/1242227/202005/1242227-20200522174716773-440755689.png)\r\n\r\n### 提交代码\r\n\r\n#### 添加指定文件到暂存区\r\n\r\n使用命令 **git add [file1]**\r\n\r\n操作如下所示：\r\n\r\n[![img](https://docu-1319658309.cos.ap-guangzhou.myqcloud.com/1242227-20200522175154053-1079994801.png)](https://img2020.cnblogs.com/blog/1242227/202005/1242227-20200522175154053-1079994801.png)\r\n\r\n#### 提交暂存区到仓库区\r\n\r\n使用命令 **git commit -m [message]**\r\n\r\n操作如下所示：\r\n\r\n[![img](https://docu-1319658309.cos.ap-guangzhou.myqcloud.com/1242227-20200522175227413-682458329.png)](https://img2020.cnblogs.com/blog/1242227/202005/1242227-20200522175227413-682458329.png)\r\n\r\n#### 连接远程仓库\r\n\r\n使用命令**git remote add origin https://github.com/用户名/仓库名.git**\r\n\r\n操作如下所示：\r\n\r\n**[![img](https://docu-1319658309.cos.ap-guangzhou.myqcloud.com/1242227-20200522175936775-728432202.png)](https://img2020.cnblogs.com/blog/1242227/202005/1242227-20200522175936775-728432202.png)**\r\n\r\n#### 上传本地指定分支到远程仓库\r\n\r\n使用命令**git push -u origin master**\r\n\r\n操作如下所示：\r\n\r\n[![img](https://docu-1319658309.cos.ap-guangzhou.myqcloud.com/1242227-20200522180101038-96789219.png)](https://img2020.cnblogs.com/blog/1242227/202005/1242227-20200522180101038-96789219.png)\r\n\r\n代码提交成功后，就可以在github中查看已提交的代码了。"
    },
    {
      "id": "/2024/03/22/20240322",
      "metadata": {
        "permalink": "/blog/2024/03/22/20240322",
        "editUrl": "https://github.com/frankelinli/frankelinli.github.io/edit/main/blog/2024/03-22-20240322.md",
        "source": "@site/blog/2024/03-22-20240322.md",
        "title": "20240322",
        "description": "如何创建对SEO友好的URL(分步指南) (ahrefs.com)",
        "date": "2024-03-18T00:00:00.000Z",
        "tags": [],
        "readingTime": 1.355,
        "hasTruncateMarker": false,
        "authors": [],
        "frontMatter": {
          "date": "2024-03-18T00:00:00.000Z"
        },
        "unlisted": false,
        "lastUpdatedAt": 1712347586000,
        "prevItem": {
          "title": "git命令操作合集简明版",
          "permalink": "/blog/2024/03/18/git命令操作合集简明版"
        },
        "nextItem": {
          "title": "Haha",
          "permalink": "/blog/2024/04/06/Haha"
        }
      },
      "content": "[如何创建对SEO友好的URL(分步指南) (ahrefs.com)](https://ahrefs.com/blog/zh/seo-friendly-urls/#anatomy-of-a-url)\r\n\r\n## 使用子目录提供层次结构\r\n\r\n子目录有助于提供层次感，并提供有用的额外信息。\r\n\r\n例如，使用以下URL：\r\n\r\n```\r\ndomain.com/airpods.html\r\n```\r\n\r\n从URL尚不清楚页面是否在出售AirPods，提供AirPods评论或其它产品。\r\n\r\n现在来看这个：\r\n\r\n```\r\ndomain.com/store/earbuds/apple/airpods.html\r\n```\r\n\r\n:::info\r\n\r\n谁说的网址URL不能四层链接？！这个权威的例子，就是4层链接！\r\n\r\n:::\r\n\r\n显然，这是销售AirPods的产品页面的URL。\r\n\r\n这个子目录结构还可以清楚地表明：\r\n\r\n- 耳塞只是在线商店提供的产品类型之一。\r\n- 苹果公司生产这款产品，并且该品牌还可能有其它耳塞出售。\r\n- 商店中可能还会有其它品牌的耳塞待售。\r\n\r\n使用子目录可以更轻松地将关键字合并到URL中，而不会让URL像垃圾链接。\r\n\r\n**垃圾链接****:** `domain.com/buy-apple-airpods-earbuds.html`\r\n**友好的链接:** `domain.com/store/earbuds/apple/airpods.html`\r\n\r\n---\r\n\r\n## 现在禁止2个：\r\n\r\n1. 禁止更换WordPress主题！\r\n2. 禁止更换eazydoc插件！"
    },
    {
      "id": "/2024/04/06/Haha",
      "metadata": {
        "permalink": "/blog/2024/04/06/Haha",
        "editUrl": "https://github.com/frankelinli/frankelinli.github.io/edit/main/blog/2024/04-06-Haha.md",
        "source": "@site/blog/2024/04-06-Haha.md",
        "title": "Haha",
        "description": "汇率",
        "date": "2023-03-23T00:00:00.000Z",
        "tags": [],
        "readingTime": 1.195,
        "hasTruncateMarker": false,
        "authors": [],
        "frontMatter": {
          "date": "2023-03-23T00:00:00.000Z"
        },
        "unlisted": false,
        "lastUpdatedAt": 1712347586000,
        "prevItem": {
          "title": "20240322",
          "permalink": "/blog/2024/03/22/20240322"
        }
      },
      "content": "## 汇率\r\n\r\n年初手里有1500美元，当时汇率是7\r\n今天规律是7.21。\r\n美元放抽屉里不动，增值了300人民币？\r\n\r\n\r\n啊，这个牛肉酱竟然可以直接当下酒菜可以直接吃。也能配酒，\r\n\r\n## 公众号粉丝\r\n\r\n公众号粉丝最多一次流量：1000多次阅读，分享47次，原因是写的一片很细小的东西。\r\n\r\n![Screenshot_2024-03-22-17-11-22-784_com.tencent.mm](https://docu-1319658309.cos.ap-guangzhou.myqcloud.com/Screenshot_2024-03-22-17-11-22-784_com.tencent.mm.png)\r\n\r\n## 公园郊游。走出去，别老在家里。\r\n\r\n\r\n\r\n## 配置Algolia\r\n\r\n全部步骤对了。搜索框搜啥都没出来。等等吧。看明天是否会好起来。\r\n\r\n---\r\n\r\n找了清洁工阿姨来帮我清理房间垃圾，花费150元。感觉很值得。我自己来回路费比这还多。自己还要累的要命。早该行动了。\r\n\r\n自己没办法什么事情都做。社会是分工的。善于花点钱来调用各种资源，来给自己的核心项目、核心实业来完善。"
    }
  ]
}